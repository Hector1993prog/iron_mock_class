# Import required libraries
import openai
from openai import  OpenAI    # OpenAI API for accessing ChatGPT models
import gradio as gr   # Gradio for creating a user-friendly interface
from omegaconf import DictConfig  # DictConfig to manage configurations in Hydra
import hydra          # Hydra library for managing configurations

# Use Hydra to initialize and load configuration from the 'config' folder
@hydra.main(config_path="config", config_name="config")
def main(cfg: DictConfig):
    # Set OpenAI API key using Hydra configuration
    openai.api_key = cfg.OPENAI_API_KEY

    # Define a function to interact with ChatGPT, including a system role for behavior customization
    def get_chatgpt_response(prompt, system_instruction="You are a helpful assistant."):
        """
        This function sends a prompt to ChatGPT along with a system instruction 
        to control the chatbot's behavior.
        
        Parameters:
        - prompt (str): The user's input or question.
        - system_instruction (str): Instructions to define the chatbot's personality or role.

        Returns:
        - response content (str): The ChatGPT response.
        """
        
        # Make a request to the OpenAI API, setting the system role and user prompt
        client = openai.OpenAI(api_key=cfg.OPENAI_API_KEY)

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # Specify the ChatGPT model
            messages=[
                {"role": "system", "content": system_instruction},  # System message to define behavior
                {"role": "user", "content": prompt}                 # User message (the prompt)
            ],
            temperature=cfg.TEMPERATURE,
            max_completion_tokens=cfg.MAX_COMPLETION_TOKENS,
            top_p=cfg.TOP_P,
            logprobs=cfg.LOGPROBS,
            top_logprobs=cfg.TOP_LOGPROBS,
        )
        # Return the content of the response generated by ChatGPT
        return response.choices[0].message.content

    # Create a Gradio interface to interact with ChatGPT
    iface = gr.Interface(
        fn=get_chatgpt_response,             # The function Gradio will call
        inputs=[
            # Define inputs: system instruction for behavior and user prompt
            gr.Textbox(lines=2, label="System Instruction"),
            gr.Textbox(lines=2, label="User Prompt")
        ],
        outputs="text",                      # Output type is text (ChatGPT's response)
        title="ChatGPT Customizable App",    # Title of the Gradio app
        description="Enter a prompt to get a response from ChatGPT. Experiment by changing the system instruction to modify behavior."  # Instructions for students
    )

    # Launch the Gradio app locally; a link to the app will be provided in the console
    iface.launch()

# Run the main function when the script is executed directly
if __name__ == "__main__":
    main()

